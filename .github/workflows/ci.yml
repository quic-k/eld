name: CI

on: [pull_request]

jobs:
  build:
    runs-on: self-hosted
    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
      cancel-in-progress: true
    permissions:
      contents: write
      statuses: write

    steps:
    - name: Set PR number and branch names
      run: |
        echo "PR_NUMBER=${{ github.event.number }}" >> $GITHUB_ENV
        echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
        echo "BASE_BRANCH_NAME=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
        echo "CACHE_DIR=/local/mnt/workspace/ccache/${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV

    - name: Checkout llvm-project
      uses: actions/checkout@v4
      with:
        repository: llvm/llvm-project
        ref: release/21.x
        path: pr-${{ env.PR_NUMBER }}/llvm-project

    - name: Checkout qualcomm/eld PR branch
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name }}
        ref: ${{ github.event.pull_request.head.ref }}
        path: pr-${{ env.PR_NUMBER }}/llvm-project/llvm/tools/eld
        fetch-depth: 0

    - name: Check for non-doc changes
      id: file-check
      working-directory: pr-${{ env.PR_NUMBER }}/llvm-project/llvm/tools/eld
      run: |
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        echo "Changed files: $CHANGED_FILES"
        for file in $CHANGED_FILES; do
          if [[ ! "$file" =~ ^docs/ && ! "$file" =~ \.md$ ]]; then
            echo "skip_build=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        done
        echo "Only doc files changed. Skipping build."
        echo "skip_build=true" >> $GITHUB_OUTPUT

    - name: Run CMake
      if: steps.file-check.outputs.skip_build == 'false'
      run: |
        export CCACHE_BASEDIR=$GITHUB_WORKSPACE
        export CCACHE_NOHASHDIR=true
        ccache --set-config max_size=32GB --dir $CACHE_DIR
        rm -rf pr-${{ env.PR_NUMBER }}/obj
        mkdir -p pr-${{ env.PR_NUMBER }}/obj
        cd pr-${{ env.PR_NUMBER }}/obj
        cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_PROJECTS="llvm;clang;clang-tools-extra" \
          -DLLVM_CCACHE_DIR=$CACHE_DIR \
          -DLLVM_CCACHE_BUILD:BOOL=ON \
          -DLLVM_ENABLE_ASSERTIONS:BOOL=ON \
          -DCMAKE_INSTALL_RPATH:STRING="$ORIGIN/../lib" \
          -DCMAKE_C_COMPILER:STRING=`which clang` \
          -DCMAKE_CXX_COMPILER:STRING=`which clang++` \
          -DCMAKE_CXX_FLAGS="-stdlib=libc++" \
          -DLLVM_TARGETS_TO_BUILD:STRING="ARM;AArch64;RISCV;Hexagon;X86" \
          -DELD_TARGETS_TO_BUILD='ARM;AArch64;RISCV;Hexagon;x86_64' \
          -DCMAKE_BUILD_WITH_INSTALL_RPATH=ON \
          ../llvm-project/llvm

    - name: Cache Usage before build
      if: steps.file-check.outputs.skip_build == 'false'
      run: |
        cd pr-${{ env.PR_NUMBER }}/obj
        ccache -s --dir $CACHE_DIR

    - name: Build Project
      if: steps.file-check.outputs.skip_build == 'false'
      run: |
        cd pr-${{ env.PR_NUMBER }}/obj
        ninja

    - name: Cache Usage after build
      if: steps.file-check.outputs.skip_build == 'false'
      run: |
        cd pr-${{ env.PR_NUMBER }}/obj
        ccache -s --dir $CACHE_DIR

    - name: Run Tests
      if: steps.file-check.outputs.skip_build == 'false'
      run: |
        cd pr-${{ env.PR_NUMBER }}/obj
        ninja check-eld

    - name: Clean up
      run: |
        rm -rf pr-${{ github.event.number }}
